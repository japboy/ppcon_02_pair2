// Generated by CoffeeScript 1.3.3
(function() {
  var $;

  $ = jQuery;

  $(function() {
    var Ball, Filter, Mouse, Window, fil;
    Window = {
      width: 0,
      height: 0,
      update: function() {
        this.width = $(window).width();
        this.height = $(window).height();
        return $('#window').trigger('update');
      },
      draw: function() {
        return $('#window').text("" + this.width + " x " + this.height);
      }
    };
    Mouse = {
      cx: 0,
      cy: 0,
      px: 0,
      py: 0,
      move: 0,
      center: 0,
      update: function(ev, win) {
        var center;
        center = win.width / 2;
        this.px = this.cx;
        this.py = this.cy;
        this.cx = ev.clientX;
        this.cy = ev.clientY;
        this.move = this.cx - this.px;
        this.center = this.cx - center;
        $('#mouse').trigger('draw');
        return $('#filter').trigger('draw');
      },
      draw: function() {
        $('#mouse').text("(" + this.cx + ", " + this.cy + ")");
        $('#move').text("" + this.move);
        return $('#center').text("" + this.center);
      }
    };
    Filter = (function() {

      Filter.prototype.width = 0;

      Filter.prototype.height = 0;

      function Filter(width, height) {
        this.width = width;
        this.height = height;
        this.draw();
      }

      Filter.prototype.update = function(width, height) {
        this.width = width;
        this.height = height;
        return $('#filter').trigger('draw');
      };

      Filter.prototype.draw = function() {
        $('#filter').css({
          backgroundImage: 'url(./img/dot.svg)',
          backgroundRepeat: 'repeat',
          width: "" + (this.width + 500) + "px",
          height: "" + this.height + "px",
          left: '-250px',
          position: 'absolute',
          top: '0',
          zIndex: '1000'
        });
        return this.fadeOut();
      };

      Filter.prototype.fadeOut = function() {
        return $('#filter').fadeOut(1000, this.fadeIn);
      };

      Filter.prototype.fadeIn = function() {
        return $('#filter').fadeIn(3000);
      };

      return Filter;

    })();
    Ball = (function() {

      Ball.prototype.width = 10;

      Ball.prototype.height = 10;

      Ball.prototype.types = ['./img/gradient-ball-a.svg', './img/gradient-ball-b.svg', './img/gradient-ball-c.svg', './img/gradient-ball-d.svg'];

      function Ball() {
        var unit;
        unit = Math.round(Math.random() * 125);
        this.width = unit;
        this.height = unit;
      }

      Ball.prototype.destroy = function() {
        return mgr.pop(this);
      };

      Ball.prototype.draw = function(sy, dy, width) {
        var el;
        el = $(document.createElement('img'));
        el.attr({
          src: this.types[Math.round(Math.random() * 3)],
          width: this.width,
          height: this.height
        }).css({
          position: 'absolute',
          top: "" + sy + "px",
          left: '-125px'
        }).animate({
          left: "" + (width + 250) + "px",
          top: "" + dy + "px"
        }, {
          duration: 6000 + width,
          easing: 'easeInOutCirc',
          complete: function() {
            return $(this).fadeOut('slow', function() {
              return $(this).remove();
            });
          }
        });
        return $('.container').append(el);
      };

      return Ball;

    })();
    Window.update();
    fil = new Filter(Window.width, Window.height);
    setInterval(function() {
      var dy, rand, sy;
      rand = Math.ceil(Math.random() * 200) - Math.ceil(Math.random() * 200);
      sy = Mouse.py + rand;
      dy = Mouse.cy + rand;
      return (new Ball()).draw(sy, dy, Window.width);
    }, 300);
    $('#mouse').on('draw', function(ev) {
      return Mouse.draw();
    });
    $('#window').on('update', function(ev) {
      Window.draw();
      return fil.draw();
    });
    $(window).on('resize', function(ev) {
      Window.update();
      return fil.update(Window.width, Window.height);
    });
    return $(document).on('mousemove', function(ev) {
      Mouse.update(ev, Window);
      return fil.draw();
    });
  });

}).call(this);
